Difficulty,Title,Frequency,Acceptance Rate,Link,Topics
HARD,Minimum Operations to Form Subsequence With Target Sum,100.0,0.31138014527845037,https://leetcode.com/problems/minimum-operations-to-form-subsequence-with-target-sum,"Array, Greedy, Bit Manipulation"
HARD,Scramble String,98.4,0.41832047408524653,https://leetcode.com/problems/scramble-string,"String, Dynamic Programming"
MEDIUM,Count the Number of Square-Free Subsets,85.5,0.2466403162055336,https://leetcode.com/problems/count-the-number-of-square-free-subsets,"Array, Math, Dynamic Programming, Bit Manipulation, Bitmask"
EASY,Best Time to Buy and Sell Stock,85.5,0.5492495111880747,https://leetcode.com/problems/best-time-to-buy-and-sell-stock,"Array, Dynamic Programming"
HARD,Substring with Concatenation of All Words,82.4,0.32865184783643636,https://leetcode.com/problems/substring-with-concatenation-of-all-words,"Hash Table, String, Sliding Window"
MEDIUM,Flatten Binary Tree to Linked List,82.4,0.6796758089317443,https://leetcode.com/problems/flatten-binary-tree-to-linked-list,"Linked List, Stack, Tree, Depth-First Search, Binary Tree"
EASY,Merge Two Sorted Lists,78.8,0.6648984054292714,https://leetcode.com/problems/merge-two-sorted-lists,"Linked List, Recursion"
HARD,Painting the Walls,74.6,0.49766822118587606,https://leetcode.com/problems/painting-the-walls,"Array, Dynamic Programming"
EASY,Fizz Buzz,69.4,0.7408558016049231,https://leetcode.com/problems/fizz-buzz,"Math, String, Simulation"
MEDIUM,Jump Game,69.4,0.3921419039631801,https://leetcode.com/problems/jump-game,"Array, Dynamic Programming, Greedy"
HARD,Maximum Genetic Difference Query,69.4,0.43806666666666666,https://leetcode.com/problems/maximum-genetic-difference-query,"Array, Hash Table, Bit Manipulation, Depth-First Search, Trie"
EASY,Minimum Time Visiting All Points,62.8,0.825058919477784,https://leetcode.com/problems/minimum-time-visiting-all-points,"Array, Math, Geometry"
MEDIUM,LRU Cache,62.8,0.4471799666923992,https://leetcode.com/problems/lru-cache,"Hash Table, Linked List, Design, Doubly-Linked List"
EASY,Valid Phone Numbers,62.8,0.2711586599087848,https://leetcode.com/problems/valid-phone-numbers,Shell
MEDIUM,Binary Search Tree Iterator,62.8,0.7448965123911119,https://leetcode.com/problems/binary-search-tree-iterator,"Stack, Tree, Design, Binary Search Tree, Binary Tree, Iterator"
MEDIUM,Furthest Building You Can Reach,62.8,0.5023487956476949,https://leetcode.com/problems/furthest-building-you-can-reach,"Array, Greedy, Heap (Priority Queue)"
MEDIUM,Best Time to Buy and Sell Stock II,62.8,0.6909042015019786,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii,"Array, Dynamic Programming, Greedy"
HARD,The Number of Good Subsets,62.8,0.3568207440811724,https://leetcode.com/problems/the-number-of-good-subsets,"Array, Math, Dynamic Programming, Bit Manipulation, Bitmask"
MEDIUM,Valid Sudoku,62.8,0.6189188833952213,https://leetcode.com/problems/valid-sudoku,"Array, Hash Table, Matrix"
HARD,Difference Between Maximum and Minimum Price Sum,53.5,0.316018387553041,https://leetcode.com/problems/difference-between-maximum-and-minimum-price-sum,"Array, Dynamic Programming, Tree, Depth-First Search"
MEDIUM,Minimum Cost to Buy Apples,53.5,0.6718579506001389,https://leetcode.com/problems/minimum-cost-to-buy-apples,"Array, Graph, Heap (Priority Queue), Shortest Path"
HARD,Make the XOR of All Segments Equal to Zero,53.5,0.39724401661501946,https://leetcode.com/problems/make-the-xor-of-all-segments-equal-to-zero,"Array, Dynamic Programming, Bit Manipulation"
EASY,Maximum Value of an Ordered Triplet I,53.5,0.5831991569292198,https://leetcode.com/problems/maximum-value-of-an-ordered-triplet-i,Array
MEDIUM,Queens That Can Attack the King,53.5,0.7208964451313755,https://leetcode.com/problems/queens-that-can-attack-the-king,"Array, Matrix, Simulation"
MEDIUM,Maximum Value of an Ordered Triplet II,53.5,0.5683962444912819,https://leetcode.com/problems/maximum-value-of-an-ordered-triplet-ii,Array
MEDIUM,Sum of Remoteness of All Cells,53.5,0.7075736325385694,https://leetcode.com/problems/sum-of-remoteness-of-all-cells,"Array, Hash Table, Depth-First Search, Breadth-First Search, Union Find, Matrix"
HARD,Minimum XOR Sum of Two Arrays,53.5,0.4869119053830768,https://leetcode.com/problems/minimum-xor-sum-of-two-arrays,"Array, Dynamic Programming, Bit Manipulation, Bitmask"
MEDIUM,Longest Palindromic Substring,53.5,0.354911217538585,https://leetcode.com/problems/longest-palindromic-substring,"Two Pointers, String, Dynamic Programming"
HARD,Sum of Distances in Tree,53.5,0.6526746624695862,https://leetcode.com/problems/sum-of-distances-in-tree,"Dynamic Programming, Tree, Depth-First Search, Graph"
MEDIUM,Minimum Total Space Wasted With K Resizing Operations,53.5,0.42643413597733715,https://leetcode.com/problems/minimum-total-space-wasted-with-k-resizing-operations,"Array, Dynamic Programming"
HARD,Sliding Window Maximum,53.5,0.4736669960948084,https://leetcode.com/problems/sliding-window-maximum,"Array, Queue, Sliding Window, Heap (Priority Queue), Monotonic Queue"
MEDIUM,Merge Intervals,53.5,0.49027602664487746,https://leetcode.com/problems/merge-intervals,"Array, Sorting"
HARD,All O`one Data Structure,53.5,0.4475319410949766,https://leetcode.com/problems/all-oone-data-structure,"Hash Table, Linked List, Design, Doubly-Linked List"
EASY,Majority Element,53.5,0.6557187931421622,https://leetcode.com/problems/majority-element,"Array, Hash Table, Divide and Conquer, Sorting, Counting"
HARD,Number of Submatrices That Sum to Target,53.5,0.7441357854743683,https://leetcode.com/problems/number-of-submatrices-that-sum-to-target,"Array, Hash Table, Matrix, Prefix Sum"
HARD,Trapping Rain Water,53.5,0.6456494340295429,https://leetcode.com/problems/trapping-rain-water,"Array, Two Pointers, Dynamic Programming, Stack, Monotonic Stack"
MEDIUM,Search in Rotated Sorted Array,53.5,0.42507786400541925,https://leetcode.com/problems/search-in-rotated-sorted-array,"Array, Binary Search"
HARD,Maximum XOR of Two Non-Overlapping Subtrees,53.5,0.494478527607362,https://leetcode.com/problems/maximum-xor-of-two-non-overlapping-subtrees,"Tree, Depth-First Search, Graph, Trie"
